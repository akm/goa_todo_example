// Code generated by goa v3.13.2, DO NOT EDIT.
//
// todos HTTP client types
//
// Command:
// $ goa gen github.com/akm/goa_todo_example/design

package client

import (
	todos "github.com/akm/goa_todo_example/gen/todos"
	todosviews "github.com/akm/goa_todo_example/gen/todos/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "todos" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Title
	Title string `form:"title" json:"title" xml:"title"`
	// State
	State string `form:"State" json:"State" xml:"State"`
}

// UpdateRequestBody is the type of the "todos" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	Body *TodoUpdatePayloadRequestBody `form:"body" json:"body" xml:"body"`
}

// ListResponseBody is the type of the "todos" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	// Items
	Items TodoListItemCollectionResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// Total number of items
	Total *uint64 `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// Offset
	Offset *uint64 `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
}

// ShowResponseBody is the type of the "todos" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID
	ID *uint64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// State
	State *string `form:"State,omitempty" json:"State,omitempty" xml:"State,omitempty"`
	// CreatedAt
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// UpdatedAt
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreateResponseBody is the type of the "todos" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// ID
	ID *uint64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// State
	State *string `form:"State,omitempty" json:"State,omitempty" xml:"State,omitempty"`
	// CreatedAt
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// UpdatedAt
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateResponseBody is the type of the "todos" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// ID
	ID *uint64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// State
	State *string `form:"State,omitempty" json:"State,omitempty" xml:"State,omitempty"`
	// CreatedAt
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// UpdatedAt
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// DeleteResponseBody is the type of the "todos" service "delete" endpoint HTTP
// response body.
type DeleteResponseBody struct {
	// ID
	ID *uint64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// State
	State *string `form:"State,omitempty" json:"State,omitempty" xml:"State,omitempty"`
	// CreatedAt
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// UpdatedAt
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// TodoListItemCollectionResponseBody is used to define fields on response body
// types.
type TodoListItemCollectionResponseBody []*TodoListItemResponseBody

// TodoListItemResponseBody is used to define fields on response body types.
type TodoListItemResponseBody struct {
	// ID
	ID *uint64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// State
	State *string `form:"State,omitempty" json:"State,omitempty" xml:"State,omitempty"`
	// CreatedAt
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// UpdatedAt
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// TodoUpdatePayloadRequestBody is used to define fields on request body types.
type TodoUpdatePayloadRequestBody struct {
	// Title
	Title string `form:"title" json:"title" xml:"title"`
	// State
	State string `form:"State" json:"State" xml:"State"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "todos" service.
func NewCreateRequestBody(p *todos.TodoCreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Title: p.Title,
		State: p.State,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "todos" service.
func NewUpdateRequestBody(p *todos.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{}
	if p.Body != nil {
		body.Body = marshalTodosTodoUpdatePayloadToTodoUpdatePayloadRequestBody(p.Body)
	}
	return body
}

// NewListTodoListOK builds a "todos" service "list" endpoint result from a
// HTTP "OK" response.
func NewListTodoListOK(body *ListResponseBody) *todosviews.TodoListView {
	v := &todosviews.TodoListView{
		Total:  body.Total,
		Offset: body.Offset,
	}
	v.Items = make([]*todosviews.TodoListItemView, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalTodoListItemResponseBodyToTodosviewsTodoListItemView(val)
	}

	return v
}

// NewShowTodoOK builds a "todos" service "show" endpoint result from a HTTP
// "OK" response.
func NewShowTodoOK(body *ShowResponseBody) *todosviews.TodoView {
	v := &todosviews.TodoView{
		ID:        body.ID,
		Title:     body.Title,
		State:     body.State,
		CreatedAt: body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
	}

	return v
}

// NewCreateTodoCreated builds a "todos" service "create" endpoint result from
// a HTTP "Created" response.
func NewCreateTodoCreated(body *CreateResponseBody) *todosviews.TodoView {
	v := &todosviews.TodoView{
		ID:        body.ID,
		Title:     body.Title,
		State:     body.State,
		CreatedAt: body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
	}

	return v
}

// NewUpdateTodoOK builds a "todos" service "update" endpoint result from a
// HTTP "OK" response.
func NewUpdateTodoOK(body *UpdateResponseBody) *todosviews.TodoView {
	v := &todosviews.TodoView{
		ID:        body.ID,
		Title:     body.Title,
		State:     body.State,
		CreatedAt: body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
	}

	return v
}

// NewDeleteTodoOK builds a "todos" service "delete" endpoint result from a
// HTTP "OK" response.
func NewDeleteTodoOK(body *DeleteResponseBody) *todosviews.TodoView {
	v := &todosviews.TodoView{
		ID:        body.ID,
		Title:     body.Title,
		State:     body.State,
		CreatedAt: body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
	}

	return v
}

// ValidateTodoListItemCollectionResponseBody runs the validations defined on
// Todo-List-ItemCollectionResponseBody
func ValidateTodoListItemCollectionResponseBody(body TodoListItemCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateTodoListItemResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTodoListItemResponseBody runs the validations defined on
// Todo-List-ItemResponseBody
func ValidateTodoListItemResponseBody(body *TodoListItemResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.State == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("State", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.State != nil {
		if !(*body.State == "open" || *body.State == "closed") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.State", *body.State, []any{"open", "closed"}))
		}
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateTodoUpdatePayloadRequestBody runs the validations defined on
// TodoUpdatePayloadRequestBody
func ValidateTodoUpdatePayloadRequestBody(body *TodoUpdatePayloadRequestBody) (err error) {
	if !(body.State == "open" || body.State == "closed") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.State", body.State, []any{"open", "closed"}))
	}
	return
}
