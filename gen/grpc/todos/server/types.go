// Code generated by goa v3.13.2, DO NOT EDIT.
//
// todos gRPC server types
//
// Command:
// $ goa gen github.com/akm/goa_todo_example/design

package server

import (
	todospb "github.com/akm/goa_todo_example/gen/grpc/todos/pb"
	todos "github.com/akm/goa_todo_example/gen/todos"
	todosviews "github.com/akm/goa_todo_example/gen/todos/views"
	goa "goa.design/goa/v3/pkg"
)

// NewProtoListResponse builds the gRPC response type from the result of the
// "list" endpoint of the "todos" service.
func NewProtoListResponse(result *todosviews.TodoListView) *todospb.ListResponse {
	message := &todospb.ListResponse{
		Total:  *result.Total,
		Offset: *result.Offset,
	}
	if result.Items != nil {
		message.Items = &todospb.TodoListItemCollection{}
		message.Items.Field = make([]*todospb.TodoListItem, len(result.Items))
		for i, val := range result.Items {
			message.Items.Field[i] = &todospb.TodoListItem{
				Id:        *val.ID,
				Title:     *val.Title,
				State:     *val.State,
				CreatedAt: *val.CreatedAt,
				UpdatedAt: *val.UpdatedAt,
			}
		}
	}
	return message
}

// NewShowPayload builds the payload of the "show" endpoint of the "todos"
// service from the gRPC request type.
func NewShowPayload(message *todospb.ShowRequest) *todos.ShowPayload {
	v := &todos.ShowPayload{
		ID: message.Id,
	}
	return v
}

// NewProtoShowResponse builds the gRPC response type from the result of the
// "show" endpoint of the "todos" service.
func NewProtoShowResponse(result *todosviews.TodoView) *todospb.ShowResponse {
	message := &todospb.ShowResponse{
		Id:        *result.ID,
		Title:     *result.Title,
		State:     *result.State,
		CreatedAt: *result.CreatedAt,
		UpdatedAt: *result.UpdatedAt,
	}
	return message
}

// NewCreatePayload builds the payload of the "create" endpoint of the "todos"
// service from the gRPC request type.
func NewCreatePayload(message *todospb.CreateRequest) *todos.TodoCreatePayload {
	v := &todos.TodoCreatePayload{
		Title: message.Title,
		State: message.State,
	}
	return v
}

// NewProtoCreateResponse builds the gRPC response type from the result of the
// "create" endpoint of the "todos" service.
func NewProtoCreateResponse(result *todosviews.TodoView) *todospb.CreateResponse {
	message := &todospb.CreateResponse{
		Id:        *result.ID,
		Title:     *result.Title,
		State:     *result.State,
		CreatedAt: *result.CreatedAt,
		UpdatedAt: *result.UpdatedAt,
	}
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the "todos"
// service from the gRPC request type.
func NewUpdatePayload(message *todospb.UpdateRequest) *todos.TodoUpdatePayload {
	v := &todos.TodoUpdatePayload{
		ID:    message.Id,
		Title: message.Title,
		State: message.State,
	}
	return v
}

// NewProtoUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "todos" service.
func NewProtoUpdateResponse(result *todosviews.TodoView) *todospb.UpdateResponse {
	message := &todospb.UpdateResponse{
		Id:        *result.ID,
		Title:     *result.Title,
		State:     *result.State,
		CreatedAt: *result.CreatedAt,
		UpdatedAt: *result.UpdatedAt,
	}
	return message
}

// NewDeletePayload builds the payload of the "delete" endpoint of the "todos"
// service from the gRPC request type.
func NewDeletePayload(message *todospb.DeleteRequest) *todos.DeletePayload {
	v := &todos.DeletePayload{
		ID: message.Id,
	}
	return v
}

// NewProtoDeleteResponse builds the gRPC response type from the result of the
// "delete" endpoint of the "todos" service.
func NewProtoDeleteResponse(result *todosviews.TodoView) *todospb.DeleteResponse {
	message := &todospb.DeleteResponse{
		Id:        *result.ID,
		Title:     *result.Title,
		State:     *result.State,
		CreatedAt: *result.CreatedAt,
		UpdatedAt: *result.UpdatedAt,
	}
	return message
}

// ValidateCreateRequest runs the validations defined on CreateRequest.
func ValidateCreateRequest(message *todospb.CreateRequest) (err error) {
	if !(message.State == "open" || message.State == "closed") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.State", message.State, []any{"open", "closed"}))
	}
	return
}

// ValidateUpdateRequest runs the validations defined on UpdateRequest.
func ValidateUpdateRequest(message *todospb.UpdateRequest) (err error) {
	if !(message.State == "open" || message.State == "closed") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.State", message.State, []any{"open", "closed"}))
	}
	return
}
