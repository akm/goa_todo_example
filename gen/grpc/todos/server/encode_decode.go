// Code generated by goa v3.13.2, DO NOT EDIT.
//
// todos gRPC server encoders and decoders
//
// Command:
// $ goa gen github.com/akm/goa_todo_example/design

package server

import (
	"context"

	todospb "github.com/akm/goa_todo_example/gen/grpc/todos/pb"
	todos "github.com/akm/goa_todo_example/gen/todos"
	todosviews "github.com/akm/goa_todo_example/gen/todos/views"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeListResponse encodes responses from the "todos" service "list"
// endpoint.
func EncodeListResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*todosviews.TodoList)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todos", "list", "*todosviews.TodoList", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoListResponse(result)
	return resp, nil
}

// EncodeShowResponse encodes responses from the "todos" service "show"
// endpoint.
func EncodeShowResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*todosviews.Todo)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todos", "show", "*todosviews.Todo", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoShowResponse(result)
	return resp, nil
}

// DecodeShowRequest decodes requests sent to "todos" service "show" endpoint.
func DecodeShowRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *todospb.ShowRequest
		ok      bool
	)
	{
		if message, ok = v.(*todospb.ShowRequest); !ok {
			return nil, goagrpc.ErrInvalidType("todos", "show", "*todospb.ShowRequest", v)
		}
	}
	var payload *todos.ShowPayload
	{
		payload = NewShowPayload(message)
	}
	return payload, nil
}

// EncodeCreateResponse encodes responses from the "todos" service "create"
// endpoint.
func EncodeCreateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*todosviews.Todo)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todos", "create", "*todosviews.Todo", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoCreateResponse(result)
	return resp, nil
}

// DecodeCreateRequest decodes requests sent to "todos" service "create"
// endpoint.
func DecodeCreateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *todospb.CreateRequest
		ok      bool
	)
	{
		if message, ok = v.(*todospb.CreateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("todos", "create", "*todospb.CreateRequest", v)
		}
		if err := ValidateCreateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *todos.TodoCreatePayload
	{
		payload = NewCreatePayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "todos" service "update"
// endpoint.
func EncodeUpdateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*todosviews.Todo)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todos", "update", "*todosviews.Todo", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoUpdateResponse(result)
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "todos" service "update"
// endpoint.
func DecodeUpdateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *todospb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*todospb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("todos", "update", "*todospb.UpdateRequest", v)
		}
		if err := ValidateUpdateRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *todos.UpdatePayload
	{
		payload = NewUpdatePayload(message)
	}
	return payload, nil
}

// EncodeDeleteResponse encodes responses from the "todos" service "delete"
// endpoint.
func EncodeDeleteResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	vres, ok := v.(*todosviews.Todo)
	if !ok {
		return nil, goagrpc.ErrInvalidType("todos", "delete", "*todosviews.Todo", v)
	}
	result := vres.Projected
	(*hdr).Append("goa-view", vres.View)
	resp := NewProtoDeleteResponse(result)
	return resp, nil
}

// DecodeDeleteRequest decodes requests sent to "todos" service "delete"
// endpoint.
func DecodeDeleteRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *todospb.DeleteRequest
		ok      bool
	)
	{
		if message, ok = v.(*todospb.DeleteRequest); !ok {
			return nil, goagrpc.ErrInvalidType("todos", "delete", "*todospb.DeleteRequest", v)
		}
	}
	var payload *todos.DeletePayload
	{
		payload = NewDeletePayload(message)
	}
	return payload, nil
}
