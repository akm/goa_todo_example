// Code generated by goa v3.13.2, DO NOT EDIT.
//
// todos gRPC client CLI support package
//
// Command:
// $ goa gen github.com/akm/goa_todo_example/design

package client

import (
	"encoding/json"
	"fmt"

	todospb "github.com/akm/goa_todo_example/gen/grpc/todos/pb"
	todos "github.com/akm/goa_todo_example/gen/todos"
)

// BuildShowPayload builds the payload for the todos show endpoint from CLI
// flags.
func BuildShowPayload(todosShowMessage string) (*todos.ShowPayload, error) {
	var err error
	var message todospb.ShowRequest
	{
		if todosShowMessage != "" {
			err = json.Unmarshal([]byte(todosShowMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 13511584583745042765\n   }'")
			}
		}
	}
	v := &todos.ShowPayload{
		ID: message.Id,
	}

	return v, nil
}

// BuildCreatePayload builds the payload for the todos create endpoint from CLI
// flags.
func BuildCreatePayload(todosCreateMessage string) (*todos.TodoCreatePayload, error) {
	var err error
	var message todospb.CreateRequest
	{
		if todosCreateMessage != "" {
			err = json.Unmarshal([]byte(todosCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"State\": \"open\",\n      \"title\": \"Et laudantium aut culpa vel magnam vitae.\"\n   }'")
			}
		}
	}
	v := &todos.TodoCreatePayload{
		Title: message.Title,
		State: message.State,
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the todos update endpoint from CLI
// flags.
func BuildUpdatePayload(todosUpdateMessage string) (*todos.TodoUpdatePayload, error) {
	var err error
	var message todospb.UpdateRequest
	{
		if todosUpdateMessage != "" {
			err = json.Unmarshal([]byte(todosUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"State\": \"open\",\n      \"id\": 12782481505029911788,\n      \"title\": \"Vero aut perspiciatis nesciunt accusamus.\"\n   }'")
			}
		}
	}
	v := &todos.TodoUpdatePayload{
		ID:    message.Id,
		Title: message.Title,
		State: message.State,
	}

	return v, nil
}

// BuildDeletePayload builds the payload for the todos delete endpoint from CLI
// flags.
func BuildDeletePayload(todosDeleteMessage string) (*todos.DeletePayload, error) {
	var err error
	var message todospb.DeleteRequest
	{
		if todosDeleteMessage != "" {
			err = json.Unmarshal([]byte(todosDeleteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 11495435370355398098\n   }'")
			}
		}
	}
	v := &todos.DeletePayload{
		ID: message.Id,
	}

	return v, nil
}
