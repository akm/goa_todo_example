// Code generated by goa v3.13.2, DO NOT EDIT.
//
// todos service
//
// Command:
// $ goa gen github.com/akm/goa_todo_example/design

package todos

import (
	"context"

	todosviews "github.com/akm/goa_todo_example/gen/todos/views"
)

// Service is the todos service interface.
type Service interface {
	// List implements list.
	List(context.Context) (res *TodoList, err error)
	// Show implements show.
	Show(context.Context, *ShowPayload) (res *Todo, err error)
	// Create implements create.
	Create(context.Context, *TodoCreatePayload) (res *Todo, err error)
	// Update implements update.
	Update(context.Context, *TodoUpdatePayload) (res *Todo, err error)
	// Delete implements delete.
	Delete(context.Context, *DeletePayload) (res *Todo, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "todos"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"list", "show", "create", "update", "delete"}

// DeletePayload is the payload type of the todos service delete method.
type DeletePayload struct {
	// ID
	ID uint64
}

// ShowPayload is the payload type of the todos service show method.
type ShowPayload struct {
	// ID
	ID uint64
}

// Todo is the result type of the todos service show method.
type Todo struct {
	// ID
	ID uint64
	// Title
	Title string
	// State
	State string
	// CreatedAt
	CreatedAt string
	// UpdatedAt
	UpdatedAt string
}

// TodoCreatePayload is the payload type of the todos service create method.
type TodoCreatePayload struct {
	// Title
	Title string
	// State
	State string
}

// TodoList is the result type of the todos service list method.
type TodoList struct {
	// Items
	Items TodoListItemCollection
	// Total number of items
	Total uint64
	// Offset
	Offset uint64
}

type TodoListItem struct {
	// ID
	ID uint64
	// Title
	Title string
	// State
	State string
	// CreatedAt
	CreatedAt string
	// UpdatedAt
	UpdatedAt string
}

type TodoListItemCollection []*TodoListItem

// TodoUpdatePayload is the payload type of the todos service update method.
type TodoUpdatePayload struct {
	// ID
	ID uint64
	// Title
	Title string
	// State
	State string
}

// NewTodoList initializes result type TodoList from viewed result type
// TodoList.
func NewTodoList(vres *todosviews.TodoList) *TodoList {
	return newTodoList(vres.Projected)
}

// NewViewedTodoList initializes viewed result type TodoList from result type
// TodoList using the given view.
func NewViewedTodoList(res *TodoList, view string) *todosviews.TodoList {
	p := newTodoListView(res)
	return &todosviews.TodoList{Projected: p, View: "default"}
}

// NewTodo initializes result type Todo from viewed result type Todo.
func NewTodo(vres *todosviews.Todo) *Todo {
	return newTodo(vres.Projected)
}

// NewViewedTodo initializes viewed result type Todo from result type Todo
// using the given view.
func NewViewedTodo(res *Todo, view string) *todosviews.Todo {
	p := newTodoView(res)
	return &todosviews.Todo{Projected: p, View: "default"}
}

// newTodoList converts projected type TodoList to service type TodoList.
func newTodoList(vres *todosviews.TodoListView) *TodoList {
	res := &TodoList{}
	if vres.Total != nil {
		res.Total = *vres.Total
	}
	if vres.Offset != nil {
		res.Offset = *vres.Offset
	}
	if vres.Items != nil {
		res.Items = newTodoListItemCollection(vres.Items)
	}
	return res
}

// newTodoListView projects result type TodoList to projected type TodoListView
// using the "default" view.
func newTodoListView(res *TodoList) *todosviews.TodoListView {
	vres := &todosviews.TodoListView{
		Total:  &res.Total,
		Offset: &res.Offset,
	}
	if res.Items != nil {
		vres.Items = newTodoListItemCollectionView(res.Items)
	}
	return vres
}

// newTodoListItemCollection converts projected type TodoListItemCollection to
// service type TodoListItemCollection.
func newTodoListItemCollection(vres todosviews.TodoListItemCollectionView) TodoListItemCollection {
	res := make(TodoListItemCollection, len(vres))
	for i, n := range vres {
		res[i] = newTodoListItem(n)
	}
	return res
}

// newTodoListItemCollectionView projects result type TodoListItemCollection to
// projected type TodoListItemCollectionView using the "default" view.
func newTodoListItemCollectionView(res TodoListItemCollection) todosviews.TodoListItemCollectionView {
	vres := make(todosviews.TodoListItemCollectionView, len(res))
	for i, n := range res {
		vres[i] = newTodoListItemView(n)
	}
	return vres
}

// newTodoListItem converts projected type TodoListItem to service type
// TodoListItem.
func newTodoListItem(vres *todosviews.TodoListItemView) *TodoListItem {
	res := &TodoListItem{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.State != nil {
		res.State = *vres.State
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.UpdatedAt != nil {
		res.UpdatedAt = *vres.UpdatedAt
	}
	return res
}

// newTodoListItemView projects result type TodoListItem to projected type
// TodoListItemView using the "default" view.
func newTodoListItemView(res *TodoListItem) *todosviews.TodoListItemView {
	vres := &todosviews.TodoListItemView{
		ID:        &res.ID,
		Title:     &res.Title,
		State:     &res.State,
		CreatedAt: &res.CreatedAt,
		UpdatedAt: &res.UpdatedAt,
	}
	return vres
}

// newTodo converts projected type Todo to service type Todo.
func newTodo(vres *todosviews.TodoView) *Todo {
	res := &Todo{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Title != nil {
		res.Title = *vres.Title
	}
	if vres.State != nil {
		res.State = *vres.State
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.UpdatedAt != nil {
		res.UpdatedAt = *vres.UpdatedAt
	}
	return res
}

// newTodoView projects result type Todo to projected type TodoView using the
// "default" view.
func newTodoView(res *Todo) *todosviews.TodoView {
	vres := &todosviews.TodoView{
		ID:        &res.ID,
		Title:     &res.Title,
		State:     &res.State,
		CreatedAt: &res.CreatedAt,
		UpdatedAt: &res.UpdatedAt,
	}
	return vres
}
